global class AutoConvertLeads_ContactFlow implements Database.Batchable<SObject>{
    
    
    public AutoConvertLeads_ContactFlow(Map<ID,AutoConvertLeads_Invocable.AutoConvertLeadInvocableRequest> request){
        this.request = request;
    }
    
    
    global Database.QueryLocator start(Database.BatchableContext bc){
        
        SET<ID> leadList = request.keySet();
        
        String lead = 'SELECT ID FROM LEAD WHERE Id IN :cmRequestMapSet';
        
        
        return Database.getQueryLocator(lead);
    }
    
    
    global void execute(Database.BatchableContext bc, List<Lead> scope){
        
        
        try{
            
            
            
            LeadStatus CLeadStatus = [SELECT Id, MasterLabel FROM LeadStatus WHERE IsConverted=true Limit 1];
            List<Database.LeadConvert> MassLeadconvert = new List<Database.LeadConvert>();
            
            for(Lead currentLead : scope){
                
                AutoConvertLeads_Invocable.AutoConvertLeadInvocableRequest acr = request.get(currentLead);
                
                system.debug('currentLead: '+ currentLead);
                
                Database.LeadConvert Leadconvert = new Database.LeadConvert();
                
                
                system.debug('leadContMap.get(currentLead): '+ request.get(currentLead));
                
                Leadconvert.setContactId(acr.contact.id);
                
                
                Leadconvert.setLeadId(currentlead.id);                
                Leadconvert.setAccountId(currentlead.Account__c);
                Leadconvert.setConvertedStatus(CLeadStatus.MasterLabel);
                Leadconvert.setOpportunityName(acr.oppName);
                MassLeadconvert.add(Leadconvert);
                
            }
            
            
            if (!MassLeadconvert.isEmpty()) {
                //List<Database.LeadConvertResult> lcr = Database.convertLead(MassLeadconvert);
                //
                system.debug('Leads Converted');
            }
            
            
            
            
            
        }
        
        catch(Exception e){
            String sub3 = 'Exception Thrown - Fail to Convert Lead';
            String body3 = 'Exception Thrown - Fail to Convert Lead: ' + e.getMessage() + '\n Stack Trace: ' + e.getStackTraceString();
            errorHandler(sub3,body3);
            
        }
        
    }
    
    global void finish(Database.BatchableContext bc){
        
        system.debug('leads converted');
    }
    
    public static void errorHandler(String sub, String body){
        
        List<String> errorEmailList = new List<String>{'salesops@goguardian.com'};
            Messaging.SingleEmailMessage msg = new Messaging.SingleEmailMessage();
        
        msg.setSubject(sub);
        msg.setToAddresses(errorEmailList);
        msg.setPlainTextBody(body);
        Messaging.sendEmail(new List<Messaging.SingleEmailMessage> { msg }, false);
        
    }
    
}
